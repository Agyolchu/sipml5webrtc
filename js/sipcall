var sTransferNumber;
var oRingTone, oRingbackTone;
var oSipStack, oSipSessionRegister, oSipSessionCall, oSipSessionTransferCall;
var audioRemote;
var bFullScreen = false;
var oNotifICall;
var oConfigCall;
var oReadyStateTimer;
var Disname = "somename";
var PrivIdentity = "someidentifier";
var PubIdentity = "sip:someidentifier@asterisk.somedomain.com";
var TxtPas = "somepassword";
var txtPhoneNumber;
C =
{
    divKeyPadWidth: 220
};



window.onload = function () {
    window.console && window.console.info && window.console.info("location=" + window.location);
    audioRemote = document.getElementById("audio_remote");
 //   divCallCtrl.onmousemove = onDivCallCtrlMouseMove;

    // set debug level
    SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");

    loadCredentials(Disname,PrivIdentity, PubIdentity, TxtPas);


    // Initialize call button
    sipCall()

    var getPVal = function (PName) {
        var query = window.location.search.substring(1);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (decodeURIComponent(pair[0]) === PName) {
                return decodeURIComponent(pair[1]);
            }
        }
        return null;
    }

    var preInit = function () {
        // set default webrtc type (before initialization)
        var s_webrtc_type = getPVal("wt");
        var s_fps = getPVal("fps");
        var s_mbwu = getPVal("mbwu"); // maxBandwidthUp (kbps)
        var s_mbwd = getPVal("mbwd"); // maxBandwidthUp (kbps)
        var s_za = getPVal("za"); // ZeroArtifacts
        var s_ndb = getPVal("ndb"); // NativeDebug

        if (s_webrtc_type) SIPml.setWebRtcType(s_webrtc_type);

        // initialize SIPML5
        SIPml.init(postInit);

        // set other options after initialization
        if (s_fps) SIPml.setFps(parseFloat(s_fps));
        if (s_mbwu) SIPml.setMaxBandwidthUp(parseFloat(s_mbwu));
        if (s_mbwd) SIPml.setMaxBandwidthDown(parseFloat(s_mbwd));
        if (s_za) SIPml.setZeroArtifacts(s_za === "true");
        if (s_ndb == "true") SIPml.startNativeDebug();

        //var rinningApps = SIPml.getRunningApps();
        //var _rinningApps = Base64.decode(rinningApps);
        //tsk_utils_log_info(_rinningApps);
    }

    oReadyStateTimer = setInterval(function () {
            if (document.readyState === "complete") {
                clearInterval(oReadyStateTimer);
                // initialize SIPML5
                preInit();
            }
        },
        500);
};

function postInit() {
    // check for WebRTC support
    if (!SIPml.isWebRtcSupported()) {
        // is it chrome?
        if (SIPml.getNavigatorFriendlyName() == 'chrome') {
            if (confirm("You're using an old Chrome version or WebRTC is not enabled.\nDo you want to see how to enable WebRTC?")) {
                window.location = 'http://www.webrtc.org/running-the-demos';
            }
            else {
                window.location = "index.html";
            }
            return;
        }
        else {
            if (confirm("webrtc-everywhere extension is not installed. Do you want to install it?\nIMPORTANT: You must restart your browser after the installation.")) {
                window.location = 'https://github.com/sarandogou/webrtc-everywhere';
            }
            else {
                // Must do nothing: give the user the chance to accept the extension
                // window.location = "index.html";
            }
        }
    }

    if (!SIPml.isWebSocketSupported()) {
        if (confirm('Your browser don\'t support WebSockets.\nDo you want to download a WebSocket-capable browser?')) {
            window.location = 'https://www.google.com/intl/en/chrome/browser/';
        }
        else {
            window.location = "index.html";
        }
        return;
    }

    // FIXME: displays must be per session

    if (!SIPml.isWebRtcSupported()) {
        if (confirm('Your browser don\'t support WebRTC.\naudio/video calls will be disabled.\nDo you want to download a WebRTC-capable browser?')) {
            window.location = 'https://www.google.com/intl/en/chrome/browser/';
        }
    }

    document.body.style.cursor = 'default';
    oConfigCall = {
        audio_remote: audioRemote,
        screencast_window_id: 0x00000000, // entire desktop
        bandwidth: { audio: undefined},
        events_listener: { events: '*', listener: onSipEventSession },
        sip_caps: [
            { name: '+g.oma.sip-im' },
            { name: 'language', value: '\"en,fr\"' }
        ]
    };
}


function loadCredentials(Disname, PrivIdentity, PubIdentity, TxtPas) {
    txtDisplayName = Disname;
    txtPrivateIdentity = PrivIdentity;
    txtPublicIdentity = PubIdentity;
    txtPassword = TxtPas;
    txtRealm = "asterisk.somedomain.com";
    txtWSProxyUrl = "wss://asterisk.somedomain.com:8089/ws";
    txtOutboundProxyUrl = null;
    txtICEServers = " [{ url: 'stun:stun.l.google.com:19302'}]";
    txtRTCWebBreaker = true;
    txtEarlyIMS = false;
    txtMediaStreamCache = true;
    txtBandwith = null;
};

function update_number() {
		txtPhoneNumber = document.getElementById("callno").value;
}
// sends SIP REGISTER request to login
function sipRegister() {
    // catch exception for IE (DOM not ready)
    try {
        if (!txtRealm || !txtPrivateIdentity || !txtPublicIdentity) {
            txtRegStatus.innerHTML = '<b>Please fill madatory fields (*)</b>';
            return;
        }
        var o_impu = tsip_uri.prototype.Parse(txtPublicIdentity);
        if (!o_impu || !o_impu.s_user_name || !o_impu.s_host) {
            txtRegStatus.innerHTML = "<b>[" + txtPublicIdentity + "] is not a valid Public identity</b>";
            return;
        }

        // enable notifications if not already done
        if (window.webkitNotifications && window.webkitNotifications.checkPermission() != 0) {
            window.webkitNotifications.requestPermission();
        }

        // update debug level to be sure new values will be used if the user haven't updated the page
        SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");

        // create SIP stack
        oSipStack = new SIPml.Stack({
                realm: txtRealm,
                impi: txtPrivateIdentity,
                impu: txtPublicIdentity,
                password: txtPassword,
                display_name: txtDisplayName,
                websocket_proxy_url: txtWSProxyUrl,
                outbound_proxy_url: txtOutboundProxyUrl,
                ice_servers: txtICEServers,
                enable_rtcweb_breaker: txtRTCWebBreaker,
                events_listener: { events: '*', listener: onSipEventStack },
                enable_early_ims: txtEarlyIMS,
                enable_media_stream_cache: txtMediaStreamCache,
                bandwidth: txtBandwith,
                sip_headers: [
                    { name: 'User-Agent', value: 'IM-client/OMA1.0 sipML5-v1.2016.03.04' },
                    { name: 'Organization', value: 'Doubango Telecom' }
                ]
            }
        );
        if (oSipStack.start() != 0) {
            txtRegStatus.innerHTML = '<b>Failed to start the SIP stack</b>';
        }
        else return;
    }
    catch (e) {
        txtRegStatus.innerHTML = "<b>2:" + e + "</b>";
    }
}

// sends SIP REGISTER (expires=0) to logout
function sipUnRegister() {
    if (oSipStack) {
        oSipStack.stop(); // shutdown all sessions
    }
}

// makes a call (SIP INVITE)
function sipCall() {
    var s_type = 'call-audio'
    if (oSipStack && !oSipSessionCall && !tsk_string_is_null_or_empty(txtPhoneNumber)) {
        if (s_type == 'call-screenshare') {
            if (!SIPml.isScreenShareSupported()) {
                alert('Screen sharing not supported. Are you using chrome 26+?');
                return;
            }
            if (!location.protocol.match('https')) {
                if (confirm("Screen sharing requires https://. Do you want to be redirected?")) {
                    sipUnRegister();
                    window.location = 'https://ns313841.ovh.net/call.htm';
                }
                return;
            }
        }

        // create call session
        oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);
        // make call
        if (oSipSessionCall.call(txtPhoneNumber) != 0) {
            oSipSessionCall = null;
            txtCallStatus.value = 'Failed to make call';
            return;
        }

    }
    else if (oSipSessionCall) {
        txtCallStatus.innerHTML = '<i>Connecting...</i>';
        oSipSessionCall.accept(oConfigCall);
    }
}


// transfers the call
function sipTransfer() {
    if (oSipSessionCall) {
        var s_destination = prompt('Enter destination number', '');
        if (!tsk_string_is_null_or_empty(s_destination)) {
            if (oSipSessionCall.transfer(s_destination) != 0) {
                txtCallStatus.innerHTML = '<i>Call transfer failed</i>';
    //            btnTransfer.disabled = false;
                return;
            }
            txtCallStatus.innerHTML = '<i>Transfering the call...</i>';
        }
    }
}

function sipHold() {
    if (oSipSessionCall) {
        var i_ret;
        txtCallStatus.innerHTML = '<i>Holding the call...</i>';
        i_ret = oSipSessionCall.hold();
        if (i_ret != 0) {
            txtCallStatus.innerHTML = '<i>Hold / Resume failed</i>';
            return;
        }
    }
}

function sipResume() {
    if (oSipSessionCall) {
        var i_ret;

        txtCallStatus.innerHTML = '<i>Resuming the call...</i>';
        i_ret = oSipSessionCall.resume();
        if (i_ret != 0) {
            txtCallStatus.innerHTML = '<i>Hold / Resume failed</i>';
            return;
        }
    }
}

// Mute or Unmute the call
function sipMute() {
    if (oSipSessionCall) {
        var i_ret;
        var bMute = true;
        txtCallStatus.innerHTML = '<i>Unmute the call...</i>';
        i_ret = oSipSessionCall.mute('audio'/*could be 'video'*/, bMute);
        if (i_ret != 0) {
            txtCallStatus.innerHTML = '<i>Mute failed</i>';
            return;
        }
        oSipSessionCall.bMute = "Unmute";
    }
}

function sipunMute() {
    if (oSipSessionCall) {
        var i_ret;
        var bMute = false;
        txtCallStatus.innerHTML =  '<i>Mute the call...</i>';
        i_ret = oSipSessionCall.mute('audio', bMute);
        if (i_ret != 0) {
            txtCallStatus.innerHTML = '<i> Unmute failed</i>';
            return;
        }
        oSipSessionCall.bMute = "Mute";
    }
}

// terminates the call (SIP BYE or CANCEL)
function sipHangUp() {
    if (oSipSessionCall) {
        txtCallStatus.innerHTML = '<i>Terminating the call...</i>';
        oSipSessionCall.hangup({ events_listener: { events: '*', listener: onSipEventSession } });
    }
}

function sipSendDTMF(c) {
    if (oSipSessionCall && c) {
        if (oSipSessionCall.dtmf(c) == 0) {
            try { dtmfTone.play(); } catch (e) { }
        }
    }
}

function startRingTone() {
    try { ringtone.play(); }
    catch (e) { }
}

function stopRingTone() {
    try { ringtone.pause(); }
    catch (e) { }
}

function startRingbackTone() {
    try { ringbacktone.play(); }
    catch (e) { }
}

function stopRingbackTone() {
    try { ringbacktone.pause(); }
    catch (e) { }
}

function showNotifICall(s_number) {
    // permission already asked when we registered
    if (window.webkitNotifications && window.webkitNotifications.checkPermission() == 0) {
        if (oNotifICall) {
            oNotifICall.cancel();
        }
        oNotifICall = window.webkitNotifications.createNotification('images/sipml-34x39.png', 'Incaming call', 'Incoming call from ' + s_number);
        oNotifICall.onclose = function () { oNotifICall = null; };
        oNotifICall.show();
        
    }
}
//
//function onDivCallCtrlMouseMove(evt) {
  //  try { // IE: DOM not ready
  //      if (tsk_utils_have_stream()) {
     //       btnCall.disabled = (!tsk_utils_have_stream() || !oSipSessionRegister || !oSipSessionRegister.is_connected());
  //          document.getElementById("divCallCtrl").onmousemove = null; // unsubscribe
//        }
//    }
//    catch (e) { }
//}
//
function uiDisableCallOptions() {
    if (window.localStorage) {
        window.localStorage.setItem('org.doubango.expert.disable_callbtn_options', 'true');

        alert('Use expert view to enable the options again (/!\\requires re-loading the page)');
    }
}



function uiCallTerminated(s_description) {

    if (window.btnBFCP) window.btnBFCP.disabled = true;

    oSipSessionCall = null;

    stopRingbackTone();
    stopRingTone();

    txtCallStatus.innerHTML = "<i>" + s_description + "</i>";


    if (oNotifICall) {
        oNotifICall.cancel();
        oNotifICall = null;
    }

    setTimeout(function () { if (!oSipSessionCall) txtCallStatus.innerHTML = ''; }, 2500);
}
function uiBtnReceive(m_text) {
    if (m_text == "Answer") {
        btnAccept.value = btnAccept.innerHTML = m_text;
        btnAccept.onclick = function () { sipCall('call-audio'); };
    }
}
// Callback function for SIP Stacks
function onSipEventStack(e /*SIPml.Stack.Event*/) {
    tsk_utils_log_info('==stack event = ' + e.type);
    switch (e.type) {
        case 'started':
        {
            // catch exception for IE (DOM not ready)
            try {
                // LogIn (REGISTER) as soon as the stack finish starting
                oSipSessionRegister = this.newSession('register', {
                    expires: 200,
                    events_listener: { events: '*', listener: onSipEventSession },
                    sip_caps: [
                        { name: '+g.oma.sip-im', value: null },
                        //{ name: '+sip.ice' }, // rfc5768: FIXME doesn't work with Polycom TelePresence
                        { name: '+audio', value: null },
                        { name: 'language', value: '\"en,fr\"' }
                    ]
                });
                oSipSessionRegister.register();
            }
            catch (e) {
                txtRegStatus.value = txtRegStatus.innerHTML = "<b>1:" + e + "</b>";
            }
            break;
        }
        case 'stopping': case 'stopped': case 'failed_to_start': case 'failed_to_stop':
    {
        var bFailure = (e.type == 'failed_to_start') || (e.type == 'failed_to_stop');
        oSipStack = null;
        oSipSessionRegister = null;
        oSipSessionCall = null;
        stopRingbackTone();
        stopRingTone();
        txtCallStatus.innerHTML = '';
        txtRegStatus.innerHTML = bFailure ? "<i>Disconnected: <b>" + e.description + "</b></i>" : "<i>Disconnected</i>";
        break;
    }

        case 'i_new_call':
        {
            if (oSipSessionCall) {
                // do not accept the incoming call if we're already 'in call'
                e.newSession.hangup(); // comment this line for multi-line support
            }
            else {
                oSipSessionCall = e.newSession;
                oSipSessionCall.setConfiguration(oConfigCall);
                uiBtnReceive('Answer');
                startRingTone();

                var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
                txtCallStatus.innerHTML = "<i>Incoming call from [<b>" + sRemoteNumber + "</b>]</i>";
                IncomingCalls.innerHTML = sRemoteNumber;
                showNotifICall(sRemoteNumber);
            }
            break;
        }

        case 'm_permission_requested':
        {
         //   divGlassPanel.style.visibility = 'visible';
            break;
        }
        case 'm_permission_accepted':
        case 'm_permission_refused':
        {
    //        divGlassPanel.style.visibility = 'hidden';
            if (e.type == 'm_permission_refused') {
                uiCallTerminated('Media stream permission denied');
            }
            break;
        }

        case 'starting': default: break;
    }
};

// Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
function onSipEventSession(e /* SIPml.Session.Event */) {
    tsk_utils_log_info('==session event = ' + e.type);

    switch (e.type) {
        case 'connecting': case 'connected':
    {
        var bConnected = (e.type == 'connected');
        if (e.session == oSipSessionRegister) {
            txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
        }
        else if (e.session == oSipSessionCall) {
            if (window.btnBFCP) window.btnBFCP.disabled = false;

            if (bConnected) {
                stopRingbackTone();
                stopRingTone();

                if (oNotifICall) {
                    oNotifICall.cancel();
                    oNotifICall = null;
                }
            }

            txtCallStatus.innerHTML = "<i>" + e.description + "</i>";

        }
        break;
    } // 'connecting' | 'connected'
        case 'terminating': case 'terminated':
    {
        if (e.session == oSipSessionRegister) {
            oSipSessionCall = null;
            oSipSessionRegister = null;

            txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
        }
        else if (e.session == oSipSessionCall) {
            uiCallTerminated(e.description);
        }
        break;
    } // 'terminating' | 'terminated'

        case 'm_stream_audio_local_added':
        case 'm_stream_audio_local_removed':
        case 'm_stream_audio_remote_added':
        case 'm_stream_audio_remote_removed':
        {
            break;
        }

        case 'i_ect_new_call':
        {
            oSipSessionTransferCall = e.session;
            break;
        }

        case 'i_ao_request':
        {
            if (e.session == oSipSessionCall) {
                var iSipResponseCode = e.getSipResponseCode();
                if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                    startRingbackTone();
                    txtCallStatus.innerHTML = '<i>Remote ringing...</i>';
                }
            }
            break;
        }

        case 'm_early_media':
        {
            if (e.session == oSipSessionCall) {
                stopRingbackTone();
                stopRingTone();
                txtCallStatus.innerHTML = '<i>Early media started</i>';
            }
            break;
        }

        case 'm_local_hold_ok':
        {
            if (e.session == oSipSessionCall) {
                if (oSipSessionCall.bTransfering) {
                    oSipSessionCall.bTransfering = false;
                    // this.AVSession.TransferCall(this.transferUri);
                }
                txtCallStatus.innerHTML = '<i>Call placed on hold</i>';
                oSipSessionCall.bHeld = true;
            }
            break;
        }
        case 'm_local_hold_nok':
        {
            if (e.session == oSipSessionCall) {
                oSipSessionCall.bTransfering = false;
                txtCallStatus.innerHTML = '<i>Failed to place remote party on hold</i>';
            }
            break;
        }
        case 'm_local_resume_ok':
        {
            if (e.session == oSipSessionCall) {
                oSipSessionCall.bTransfering = false;
                txtCallStatus.innerHTML = '<i>Call taken off hold</i>';
                oSipSessionCall.bHeld = false;

            }
            break;
        }
        case 'm_local_resume_nok':
        {
            if (e.session == oSipSessionCall) {
                oSipSessionCall.bTransfering = false;
                txtCallStatus.innerHTML = '<i>Failed to unhold call</i>';
            }
            break;
        }
        case 'm_remote_hold':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Placed on hold by remote party</i>';
            }
            break;
        }
        case 'm_remote_resume':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Taken off hold by remote party</i>';
            }
            break;
        }
        case 'm_bfcp_info':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = 'BFCP Info: <i>' + e.description + '</i>';
            }
            break;
        }

        case 'o_ect_trying':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Call transfer in progress...</i>';
            }
            break;
        }
        case 'o_ect_accepted':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Call transfer accepted</i>';
            }
            break;
        }
        case 'o_ect_completed':
        case 'i_ect_completed':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Call transfer completed</i>';
                if (oSipSessionTransferCall) {
                    oSipSessionCall = oSipSessionTransferCall;
                }
                oSipSessionTransferCall = null;
            }
            break;
        }
        case 'o_ect_failed':
        case 'i_ect_failed':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Call transfer failed</i>';
            }
            break;
        }
        case 'o_ect_notify':
        case 'i_ect_notify':
        {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = "<i>Call Transfer: <b>" + e.getSipResponseCode() + " " + e.description + "</b></i>";
                if (e.getSipResponseCode() >= 300) {
                    if (oSipSessionCall.bHeld) {
                        oSipSessionCall.resume();
                    }
//                    btnTransfer.disabled = false;
                }
            }
            break;
        }
        case 'i_ect_requested':
        {
            if (e.session == oSipSessionCall) {
                var s_message = "Do you accept call transfer to [" + e.getTransferDestinationFriendlyName() + "]?";//FIXME
                if (confirm(s_message)) {
                    txtCallStatus.innerHTML = "<i>Call transfer in progress...</i>";
                    oSipSessionCall.acceptTransfer();
                    break;
                }
                oSipSessionCall.rejectTransfer();
            }
            break;
        }
    }
}

